function setupOptionsPanelPolygonsManager(obj)
%SETUPOPTIONSPANELPOLYGONSMANAGER  Creates a panel with multiple uses
    
    obj.handles.options{2} = uix.TabPanel('parent', obj.handles.options{1}, ...
                                        'tabwidth', 89, ...
                                      'background', [.99 .99 .99]);
     
    obj.handles.options{3} = uix.TabPanel('parent', obj.handles.options{1}, ...
                                        'tabwidth', 89, ...
                                      'background', [.99 .99 .99]);
                
    informations = uipanel('parent', obj.handles.options{2}, ...
                       'background', [.99 .99 .99], ...
                       'bordertype', 'none');
    factors = uipanel('parent', obj.handles.options{2}, ...
                  'background', [.99 .99 .99], ...
                  'bordertype', 'none');
                   
    coloration = uipanel('parent', obj.handles.options{3}, ...
                     'background', [.99 .99 .99], ...
                     'bordertype', 'none');
    pca = uipanel('parent', obj.handles.options{3}, ...
              'background', [.99 .99 .99], ...
              'bordertype', 'none');
                   
     
    obj.handles.options{1}.TabTitles = {'Informations', 'Coloration'};
    obj.handles.options{2}.TabTitles = {'Infos', 'Factors'};
    obj.handles.options{3}.TabTitles = {'Colors', 'Pca'};
     
    obj.handles.options{1}.TabEnables = {'on', 'off'};
    obj.handles.options{2}.TabEnables = {'on', 'off'};
    obj.handles.options{3}.TabEnables = {'on', 'off'};
    
    % fields with fixed text 
    uicontrol('parent', informations,...
            'position', [10 97 100 20], ...
               'style', 'text',...
              'string', 'Area :');

    uicontrol('parent', informations,...
            'position', [10 68 100 20], ...
               'style', 'text',...
              'string', 'Perimeter :');

    uicontrol('parent', informations,...
            'position', [10 39 100 20], ...
               'style', 'text',...
              'string', 'Vertices :');

    uicontrol('parent', informations,...
            'position', [10 10 100 20], ...
               'style', 'text',...
              'string', 'Orientation :');

    % fields with dynamic text 
    fields{1} = uicontrol('parent', informations,...
                       'position', [86 97 100 20], ...
                          'style', 'text');

    fields{2} = uicontrol('parent', informations,...
                       'position', [86 68 100 20], ...
                          'style', 'text');

    fields{3} = uicontrol('parent', informations,...
                       'position', [86 39 100 20], ...
                          'style', 'text');

    fields{4} = uicontrol('parent', informations,...
                       'position', [86 10 100 20], ...
                          'style', 'text');
                      
     
    % create the tab containing the factors
    uicontrol('parent', factors, ...
            'position', [10 97 90 20], ...
               'style', 'text', ...
              'string', 'Factor :');

    fields{5} = uicontrol('Parent', factors, ...
                     'Position', [100 100 90 20], ...
                        'Style', 'popup', ...
                       'string', {'none', 'factor'}, ...
                          'tag', 'factor', ...
                     'callback', @(~,~) popupFactorCallback);

    textFactor = uicontrol('parent', factors, ...
                         'position', [10 39 90 20], ...
                            'style', 'text');

    fields{6} = uicontrol('parent', factors, ...
                   'position', [100 41 90 20], ...
                      'style', 'text');
               
        
     
    % create the tab containing the coloration options
    uicontrol('parent', coloration, ...
            'position', [10 97 90 20], ...
               'style', 'text', ...
              'string', 'Factor :');

    popupColor = uicontrol('Parent', coloration, ...
                     'Position', [100 100 90 20], ...
                        'Style', 'popup', ...
                       'string', {'none', 'factor'}, ...
                          'tag', 'factor', ...
                     'callback', @(~,~) callback);

    uicontrol('parent', coloration, ...
            'position', [10 39 90 20], ...
               'style', 'text', ...
              'string', 'Legend :');

    toggleColor = uicontrol('parent', coloration, ...
                   'position', [100 41 90 20], ...
                      'style', 'toggleButton', ...
                     'string', 'Yes', ...
                   'callback', @(h,~) toggle(h));
               
        
    % create the tab containing the pca coloration
    uicontrol('parent', pca, ...
            'position', [10 97 90 20], ...
               'style', 'text', ...
              'string', 'Group :');

    popupPCA1 = uicontrol('Parent', pca, ...
                     'Position', [100 100 90 20], ...
                        'Style', 'popup', ...
                       'string', {'None', 'Convex hull', 'Ellipse', 'Inertia ellipse'}, ...
                       'enable', 'off', ...
                          'tag', 'group', ...
                     'callback', @(~,~) popupPCACallback);
                 
    uicontrol('parent', pca, ...
            'position', [10 68 90 20], ...
               'style', 'text', ...
              'string', 'Factor :');

    popupPCA2 = uicontrol('Parent', pca, ...
                     'Position', [100 71 90 20], ...
                        'Style', 'popup', ...
                       'string', {'none', 'factor'}, ...
                       'enable', 'off', ...
                          'tag', 'factor', ...
                     'callback', @(~,~) callback);

    uicontrol('parent', pca, ...
            'position', [10 39 90 20], ...
               'style', 'text', ...
              'string', 'Marker size :');

    popupPCA3 = uicontrol('Parent', pca, ...
                     'Position', [100 42 90 20], ...
                        'Style', 'popup', ...
                       'string', 5:25, ...
                        'value', 6, ...
                     'callback', @(~,~) callback);

    uicontrol('parent', pca, ...
            'position', [10 10 90 20], ...
               'style', 'text', ...
              'string', 'Names :');

    togglePCA = uicontrol('parent', pca, ...
                       'position', [100 12 90 20], ...
                          'style', 'toggleButton', ...
                         'string', 'Yes', ...
                       'callback', @(h,~) toggle(h));
                 
                   
    obj.handles.infoFields = fields;
     
    h = findobj(obj.handles.options{1}, '-not', 'Type', 'uicontainer', '-and', '-not', 'Type', 'uipanel');
    
    set(h, 'fontsize', 10, ...
'horizontalalignment', 'left', ...
         'background', [.99 .99 .99]); 
     
    function callback
        val = popupColor.Value;
        maps = popupColor.String;
        factor = maps{val};
        
        leg = toggleColor.Value;
        
        val = popupPCA1.Value;
        maps = popupPCA1.String;
        group = maps{val};
        
        val = popupPCA2.Value;
        maps = popupPCA2.String;
        factor2 = maps{val};
        
        marker = popupPCA3.Value + 4;
        
        names = get(togglePCA,'Value');
        
        if strcmp(factor, 'none') && strcmp(factor2, 'none')
            deleteColors(marker, names);
        else
            selectFactor(obj, factor, leg, factor2, group, marker, names);
        end
    end

    function toggle(button)
        if get(button,'Value') == 1
            set(button, 'string', 'No');
        else 
            set(button, 'string', 'Yes');
        end
        callback;
    end
    
    function popupPCACallback
        if popupPCA1.Value == 1
            popupPCA2.Value = 1;
            popupPCA2.Enable = 'off';
        else
            popupPCA2.Enable = 'on';
        end
        callback;
    end

    function popupFactorCallback
        val = fields{5}.Value;
        maps = fields{5}.String;
        factor = maps{val};
        textFactor.String = [factor ' :'];
        
        if length(obj.model.selectedPolygons) == 1 && ~strcmp(factor,'none')
            fields{6}.String = getLevel(obj.model.factorTable, obj.model.selectedPolygons, factor);
        else
            fields{6}.String = '';
        end
    end

    function deleteColors(marker, names)
    %DELETECOLORS  display the datas of the current polygons without coloration

        if isempty(obj.handles.Panels{1}.type)
            % display the polygons without coloration
            if iscell(obj.handles.Panels{1}.uiLegend)
                delete(obj.handles.Panels{1}.uiLegend{1});
            end
            displayPolygons(obj.handles.Panels{1}, getAllPolygons(obj.model.PolygonArray));
            if strcmp(class(obj.model.PolygonArray), 'PolarSignatureArray')
                if iscell(obj.handles.Panels{2}.uiLegend)
                    delete(obj.handles.Panels{2}.uiLegend{1});
                end
                displayPolarSignature(obj.handles.Panels{2}, obj.model.PolygonArray.signatures, obj.model.PolygonArray.angleList);
            end
        else
            lines = findobj(allchild(obj.handles.Panels{1}.uiAxis), '-not', 'linestyle', 'none');
            points = findobj(allchild(obj.handles.Panels{1}.uiAxis), '-not', 'marker', 'none', '-and', '-not', 'type', 'text');
            
            set(points, 'color', 'k', 'markersize', marker);
            delete(lines);
            if iscell(obj.handles.Panels{1}.uiLegend)
                delete(obj.handles.Panels{1}.uiLegend{1});
            end
            obj.handles.Panels{1}.uiLegend = [];
            if names == 0
                for i = 1:length(points)
                    text(points(i).XData, points(i).YData, ['  ' points(i).Tag], ...
                                     'parent', obj.handles.Panels{1}.uiAxis, ...
                                      'color', 'k');
                end
            end
            updateSelectedPolygonsDisplay(obj.handles.Panels{1});
        end
    end  
end